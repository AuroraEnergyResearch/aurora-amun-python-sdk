"use strict";(self.webpackChunkamun_sdk=self.webpackChunkamun_sdk||[]).push([[372],{4634:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var r=s(5893),i=s(1151);const t={sidebar_label:"session",title:"session"},l=void 0,a={id:"Reference/session",title:"session",description:"APISession Objects",source:"@site/docs/Reference/session.md",sourceDirName:"Reference",slug:"/Reference/session",permalink:"/aurora-amun-python-sdk/docs/Reference/session",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"session",title:"session"},sidebar:"docSidebar",previous:{title:"responses",permalink:"/aurora-amun-python-sdk/docs/Reference/responses"}},o={},c=[{value:"APISession Objects",id:"apisession-objects",level:2},{value:"AmunSession Objects",id:"amunsession-objects",level:2},{value:"get_turbines",id:"get_turbines",level:4},{value:"get_turbine_by_name",id:"get_turbine_by_name",level:4},{value:"get_power_curve",id:"get_power_curve",level:4},{value:"get_region_details",id:"get_region_details",level:4},{value:"get_scenarios",id:"get_scenarios",level:4},{value:"get_scenario_by_name",id:"get_scenario_by_name",level:4},{value:"create_valuation",id:"create_valuation",level:4},{value:"submit_load_factor_calculations",id:"submit_load_factor_calculations",level:4},{value:"get_load_factor_calculation",id:"get_load_factor_calculation",level:4},{value:"track_load_factor_calculation",id:"track_load_factor_calculation",level:4},{value:"run_load_factors_in_batch",id:"run_load_factors_in_batch",level:4},{value:"run_load_factor_calculation",id:"run_load_factor_calculation",level:4},{value:"run_load_factors_for_parameters_batch",id:"run_load_factors_for_parameters_batch",level:4},{value:"run_load_factor_for_parameters",id:"run_load_factor_for_parameters",level:4},{value:"get_valuation_results",id:"get_valuation_results",level:4},{value:"delete_valuation",id:"delete_valuation",level:4},{value:"get_wind",id:"get_wind",level:4},{value:"get_wind_atlas",id:"get_wind_atlas",level:4},{value:"get_windfarms",id:"get_windfarms",level:4},{value:"get_windfarm",id:"get_windfarm",level:4}];function d(e){const n={code:"code",em:"em",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"apisession-objects",children:"APISession Objects"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class APISession()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Internal class to hold base methods for interacting with the Aurora HTTP API"}),"\n",(0,r.jsx)(n.h2,{id:"amunsession-objects",children:"AmunSession Objects"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class AmunSession(APISession)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Manage access to the Amun API."}),"\n",(0,r.jsxs)(n.p,{children:["By default the session will connect to the production Amun API endpoint. This can be overridden by passing the base_url into the constructor\nor by setting the environment variable ",(0,r.jsx)(n.em,{children:"AURORA_API_BASE_URL"}),". This is for internal use only."]}),"\n",(0,r.jsxs)(n.p,{children:["The authentication token is read from the users home directory ",(0,r.jsx)(n.em,{children:"$home/.aurora-api-key"})," e.g. ",(0,r.jsx)(n.em,{children:"C:/Users/Joe Bloggs/.aurora-api-key"}),".\nThis can be overridden by passing the token into the constructor or by setting the environment variable ",(0,r.jsx)(n.em,{children:"AURORA_API_KEY"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," ",(0,r.jsx)(n.em,{children:"string, optional"})," - Override the base url used to contact the Amun API. Defaults to None."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," ",(0,r.jsx)(n.em,{children:"string, optional"})," - Overide the api authentication token used for API access. Defaults to None."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_turbines",children:"get_turbines"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_turbines()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the turbines available to the user."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Response example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"    [{\n        'id': 29,\n        'manufacturer': 'EWT Directwind',\n        'name': 'EWT Directwind 2000/96',\n        'ratedCapacity': 2,\n        'rotorDiameter': 96,\n        'minHubHeight': None,\n        'maxHubHeight': None,\n        'cutInSpeed': 3.5,\n        'cutOutSpeed': 25,\n        'specSource': 'https://www.thewindpower.net/turbine_en_879_ewt_directwind-2000-96.php',\n        'type': 'public',\n        },\n            ...\n"})}),"\n",(0,r.jsx)(n.h4,{id:"get_turbine_by_name",children:"get_turbine_by_name"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_turbine_by_name(turbine_name)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get turbine information by name."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"A dictionary with the turbine information. If not found, raises an error."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Response example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"    {\n        'id': 29,\n        'manufacturer': 'EWT Directwind',\n        'name': 'EWT Directwind 2000/96',\n        'ratedCapacity': 2,\n        'rotorDiameter': 96,\n        'minHubHeight': None,\n        'maxHubHeight': None,\n        'cutInSpeed': 3.5,\n        'cutOutSpeed': 25,\n        'specSource': 'https://www.thewindpower.net/turbine_en_879_ewt_directwind-2000-96.php',\n        'type': 'public',\n    }\n"})}),"\n",(0,r.jsx)(n.h4,{id:"get_power_curve",children:"get_power_curve"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_power_curve(turbine_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the power curve for a turbine."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"turbine_id"})," ",(0,r.jsx)(n.em,{children:"int"})," - The id of the turbine. To get ID (with additional info), refer to ",(0,r.jsx)(n.code,{children:"AmunSession.get_turbines"}),"\nor ",(0,r.jsx)(n.code,{children:"AmunSession.get_turbine_by_name"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"List of dictionaries with these fields:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"speed"})," - wind speed in m/s"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"power"})," - generated power in kW"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_region_details",children:"get_region_details"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_region_details(latitude: float,\n                       longitude: float) -> List[RegionDetail]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get a list of supported regions for a given point."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"latitude"})," ",(0,r.jsx)(n.em,{children:"float"})," - latitude of the point to lookup."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"longitude"})," ",(0,r.jsx)(n.em,{children:"float"})," - longitude"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"List[RegionDetail]"})," - A list of all the supported regions for the point."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_scenarios",children:"get_scenarios"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_scenarios(region)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Get the scenarios that are available for the specified region. The regions for a given location\nto use can be found be using ",(0,r.jsx)(n.code,{children:".AmunSession.get_region_details"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"region"})," ",(0,r.jsx)(n.em,{children:"str"})," - The code for the region to lookup scenarios for."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"List of Scenario details."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Response example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"        [{\n            'id': 3,\n            'name': '2019 Smart Power Scenario',\n            'description': 'To examine the impact of a smarter power system with more flexible capacity and demand',\n            'region': 'gbr',\n            'S3uri': None,\n            'currency': 'GBP',\n            'currencyYear': 2018,\n            'hasFile': False\n        },\n        ...\n"})}),"\n",(0,r.jsx)(n.h4,{id:"get_scenario_by_name",children:"get_scenario_by_name"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_scenario_by_name(region, scenario_name)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get a scenario by name"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"region"})," ",(0,r.jsx)(n.em,{children:"str"})," - The code for the region to lookup scenarios for. Use ",(0,r.jsx)(n.code,{children:"AmunSession.get_region_details"})," to get the region code for a point."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"scenario_name"})," ",(0,r.jsx)(n.em,{children:"str"})," - The name of the scenario to get. Please ensure the name is spelled correctly."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"An object with infomation about the scenario. If not found, raises an error."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Response example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"    {\n        'id': 3,\n        'name': '2019 Smart Power Scenario',\n        'description': 'To examine the impact of a smarter power system with more flexible capacity and demand',\n        'region': 'gbr',\n        'S3uri': None,\n        'currency': 'GBP',\n        'currencyYear': 2018,\n        'hasFile': False\n    }\n"})}),"\n",(0,r.jsx)(n.h4,{id:"create_valuation",children:"create_valuation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def create_valuation(valuation)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a valuation in Amun."}),"\n",(0,r.jsx)(n.p,{children:"Expects a dictionary of with these fields:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"name"})," (str)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"description"})," (str)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"longitude"})," (str)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"latitude"})," (str)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"windType"}),' (str) - One of "era5", "merra2", "weibull", "newa", "p50scaling", "powerdensity", "averagewindspeed", "aurorawindatlas", "p50yieldscaling". Not applicable for uploaded data.']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"scenarioId"})," (string) to get the id of the scenario you want to use, check ",(0,r.jsx)(n.code,{children:"AmunSession.get_scenario_by_name"})," or ",(0,r.jsx)(n.code,{children:"AmunSession.get_scenarios"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"turbineModelId"})," (int): The Id of the Turbine to use in the calculation as returned from ",(0,r.jsx)(n.code,{children:".AmunSession.get_turbines"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"numberOfTurbines"})," (int): The number of turbines in the site."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"hubHeight"})," (float): Given in meters (m)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"useReanalysisCorrection"})," - if True, will use regional reanalysis correction if it is available for the location"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"usePowerCurveSmoothing"})," - if True, will use regional reanalysis correction if it is available for the location"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"roughnessLength"})," (float, optional): Static roughness. If not given, will be derived from reanalysis data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"curtailmentThreshold"})," (float, optional): Defaults to 0"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"lossesWake"})," (float, optional): The percentage to apply for wake loss. (0 <= lossesWake < 1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"lossesAvailability"})," (float, optional): Percentage for external losses. (0 <= lossesAvailability < 1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"lossesElectrical"})," (float, optional): Percentage for external losses. (0 <= lossesElectrical < 1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"lossesTurbinePerformance"})," (float, optional): Percentage for external losses. (0 <= lossesTurbinePerformance < 1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"lossesEnvironmental"})," (float, optional): Percentage for external losses. (0 <= lossesEnvironmental < 1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"lossesOtherCurtailment"})," (float, optional): Percentage for external losses. (0 <= lossesOtherCurtailment < 1)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Additional parameters that are specific to a wind type will be required. Please look at the parameters section of SDK Reference documentation and\nsee Amun SDK Examples to see how to create a valuation for your use case."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:["A dictionary with the valuation information. Additionally provides a unique valuation id that should be used to run it and get results. Please see ",(0,r.jsx)(n.code,{children:"AmunSession.get_valuation_results"})," for more details."]}),"\n",(0,r.jsx)(n.h4,{id:"submit_load_factor_calculations",children:"submit_load_factor_calculations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def submit_load_factor_calculations(\n        load_factor_configurations: List[Dict]) -> List[str]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Submits a request to calculate the load factor and wind speeds for a year given\na start time and a location.\nYou can submit a lot of calculations at once and then use the tokens in response\nto check on the status of each calculation."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"See Also"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"AmunSession.get_region_details"})," to get region codes and available datasets for a point"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"list of load_factor_configurations where each load_factor_configuration is a dictionary of load factor parameters."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"List of tokens where each token is a unique identifier for the calculation. The order of the tokens matches the order of the input parameters."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"token: unique identifier for the calculation"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_load_factor_calculation",children:"get_load_factor_calculation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_load_factor_calculation(token: str)\n"})}),"\n",(0,r.jsx)(n.p,{children:"V2 feature.\nGets the status of a load factor calculation given its token."}),"\n",(0,r.jsx)(n.p,{children:"For calculation that is still running:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"status"}),' - "Running"']}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For a finished calculation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"status"}),' - "Complete"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"exiryTime"})," - Date and time of when the results will be deleted,"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"results"})," - load factors"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For errored calculation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"status"}),' - "Errored"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"error"})," - a string explaining the error"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"track_load_factor_calculation",children:"track_load_factor_calculation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def track_load_factor_calculation(tokens: List[str]) -> List[Dict]\n"})}),"\n",(0,r.jsx)(n.p,{children:"V2 feature\nTracks the status of a load factor calculation/simulation given their token and\nreturns the results of the simulations as soon as they finish running."}),"\n",(0,r.jsx)(n.p,{children:"Accepts a list of tokens of calculations and returns a list of results.\nThe order of the results matches the order of the input parameters.\nDepending on the status of the calculation the result will have different keys:"}),"\n",(0,r.jsx)(n.p,{children:"For finished calculations:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"parameters"})," - the parameters used for the calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"appliedParams"})," - smoothing coefficients and other parameters applied to the calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"typicalHourly"})," - typical hourly load factors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"weatherYearHourly"})," - hourly load factors for the weather year"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For errored calculations:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"error"})," - a string explaining the error"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For calcualtions that failed to be submitted:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"None"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"run_load_factors_in_batch",children:"run_load_factors_in_batch"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def run_load_factors_in_batch(\n        load_factor_configurations: List[Dict]) -> List[Dict]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Perform multiple load factor calculations in parallel."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"See Also"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:".AmunSession.get_region_details"})," to get region codes and available datasets for a point"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"list of load_factor_configurations where each load_factor_configuration is a dictionary of load factor parameters."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"List of dictionaries of this type. Order of the results matches the order of the input parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"parameters"})," - the parameters used for the calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"appliedParams"})," - smoothing coefficients and other parameters applied to the calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"typicalHourly"})," - typical hourly load factors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"weatherYearHourly"})," - hourly load factors for the weather year"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"run_load_factor_calculation",children:"run_load_factor_calculation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def run_load_factor_calculation(load_factor_configuration: Dict,\n                                version=1) -> Dict\n"})}),"\n",(0,r.jsx)(n.p,{children:"Calculate the load factor and wind speeds for a year given a start time and a location."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"See Also"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:".AmunSession.get_region_details"})," to get region codes and available datasets for a point"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"load_factor_configuration"})," - A dictionary of load factor parameters."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"version"})," ",(0,r.jsx)(n.em,{children:"defaults to 1"})," - Version of the API to use for calculations (1 or 2)."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"A Dictionary with the keys"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"parameters"})," - the parameters used for the calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"appliedParams"})," - smoothing coefficients and other parameters applied to the calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"typicalHourly"})," - typical hourly load factors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"weatherYearHourly"})," - hourly load factors for the weather year"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"run_load_factors_for_parameters_batch",children:"run_load_factors_for_parameters_batch"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def run_load_factors_for_parameters_batch(\n        flow_parameters: List[FlowParameters],\n        base_parameters: List[LoadFactorBaseParameters]) -> List[Dict]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Perform multiple load factor calculations in parallel by providing flow parameters and base parameters\nfor each calculation."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"See Also"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:".AmunSession.get_region_details"})," to get region codes and available datasets for a point"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"flow_parameters"})," - The list of parameters specific to the calculation type","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"aurora.amun.client.parameters.AverageWindSpeedParameters"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"aurora.amun.client.parameters.BuiltInWindParameters"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"aurora.amun.client.parameters.PowerDensityParameters"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"aurora.amun.client.parameters.WeibullParameters"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"aurora.amun.client.parameters.UploadedWindParameters"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_parameters"})," - List of parameters required for all flows to the calculation type. These are applied to all the flow parameters"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"List of dictionaries of this type. Order of the results matches the order of the input parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"parameters"})," - the parameters used for the calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"appliedParams"})," - smoothing coefficients and other parameters applied to the calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"flow_parameters"}),"0 - typical hourly load factors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"flow_parameters"}),"1 - hourly load factors for the weather year"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"run_load_factor_for_parameters",children:"run_load_factor_for_parameters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def run_load_factor_for_parameters(flow_parameters: FlowParameters,\n                                   base_parameters: LoadFactorBaseParameters,\n                                   version=1)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Calculate the load factor and wind speeds for a year given a start time and a location."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"See Also"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"AmunSession.get_region_details"})," to get region codes and available datasets for a point"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"flow_parameters"})," - The parameters specific to the calculation type","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"aurora.amun.client.parameters.AverageWindSpeedParameters"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"aurora.amun.client.parameters.BuiltInWindParameters"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"aurora.amun.client.parameters.PowerDensityParameters"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"aurora.amun.client.parameters.WeibullParameters"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"aurora.amun.client.parameters.UploadedWindParameters"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_parameters"})," ",(0,r.jsx)(n.em,{children:"LoadFactorBaseParameters"})," - The parameters required for all flows to the calculation type."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"version"})," ",(0,r.jsx)(n.em,{children:"defaults to 1"})," - Version of the API to use for calculations (1 or 2)."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"A Dictionary with the keys"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"parameters"})," - the parameters used for the calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"appliedParams"})," - smoothing coefficients and other parameters applied to the calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"typicalHourly"})," - typical hourly load factors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"weatherYearHourly"})," - hourly load factors for the weather year"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_valuation_results",children:"get_valuation_results"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_valuation_results(valuation_id, format, should_return_hourly_data)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Gets the results of a valuation"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"valuation_id"})," ",(0,r.jsx)(n.em,{children:"number"})," - The id of the valuation to get the results for."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"format"})," ",(0,r.jsx)(n.em,{children:"string"}),' - The format of the results. One of ("json","xlsx")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"should_return_hourly_data"})," ",(0,r.jsx)(n.em,{children:"bool"})," - Set to true to return the hourly data for the valuation."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"delete_valuation",children:"delete_valuation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def delete_valuation(valuation_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes a valuation from Amun."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"valuation_id"})," ",(0,r.jsx)(n.em,{children:"string"})," - The id of the valuation to delete."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_wind",children:"get_wind"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_wind(lat, lon, year, dataset)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The parameters used for built in wind calculations (",(0,r.jsx)(n.em,{children:"era5"}),",",(0,r.jsx)(n.em,{children:"merra2"}),",",(0,r.jsx)(n.em,{children:"newa"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Notes"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"Not all locations support all wind types and not all locations support Regional Reanalysis Correction."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"latitude"})," ",(0,r.jsx)(n.em,{children:"float"})," - The latitude of the point (-90 to 90)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"longitude"})," ",(0,r.jsx)(n.em,{children:"float"})," - The latitude of the point (-180 to 180).\nyear (number)",":The"," year to fetch wind data for."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset"})," ",(0,r.jsx)(n.em,{children:"str"}),' - one of ("Era5","Merra2","NEWA").']}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_wind_atlas",children:"get_wind_atlas"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_wind_atlas(lat, lon, radius, numberOfTurbines, rotorDiameterInMeters,\n                   regionCode)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The parameters used for built in wind calculations (",(0,r.jsx)(n.em,{children:"era5"}),",",(0,r.jsx)(n.em,{children:"merra2"}),",",(0,r.jsx)(n.em,{children:"newa"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Notes"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"Not all locations are supported."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"latitude"})," ",(0,r.jsx)(n.em,{children:"float"})," - The latitude of the point (-90 to 90)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"longitude"})," ",(0,r.jsx)(n.em,{children:"float"})," - The latitude of the point (-180 to 180).\nradius (int)",":The"," radius of the area to average wind speed over 0 to 1000."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"numberOfTurbines"})," ",(0,r.jsx)(n.em,{children:"int"})," - If no radius specified this is required to allow the size of the windfarm to be estimated.\nrotorDiameterInMeters (int)",":The"," rotor diameter of the turbines used to calculate size of the windfarm from the number of turbines if None a default value is used."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_windfarms",children:"get_windfarms"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_windfarms(search)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Search for windfarms"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"search"})," ",(0,r.jsx)(n.em,{children:"string"})," - Search term to filter by."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_windfarm",children:"get_windfarm"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_windfarm(uuid)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get windfarm by uuid"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"search"})," ",(0,r.jsx)(n.em,{children:"uuid"})," - uuid of windfarm to get."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>l});var r=s(7294);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);