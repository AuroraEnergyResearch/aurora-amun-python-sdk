"use strict";(self.webpackChunkamun_sdk=self.webpackChunkamun_sdk||[]).push([[994],{3998:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=n(5893),t=n(1151);const o={title:"Common Examples"},s=void 0,i={id:"Examples/Load Factors/common",title:"Common Examples",description:"Amun SDK provides an array of options on how to calculate load factors for a location. Examples below will be using AmunSession.runloadfactorforparameters that expects two parts",source:"@site/docs/Examples/01-Load Factors/01-common.md",sourceDirName:"Examples/01-Load Factors",slug:"/Examples/Load Factors/common",permalink:"/aurora-amun-python-sdk/docs/Examples/Load Factors/common",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Common Examples"},sidebar:"docSidebar",previous:{title:"Installation",permalink:"/aurora-amun-python-sdk/docs/intro"},next:{title:"Advanced Features",permalink:"/aurora-amun-python-sdk/docs/Examples/Load Factors/advanced"}},l={},d=[{value:"Time consideration",id:"time-consideration",level:4},{value:"Calculate Load Factors with Amun Wind Atlas",id:"calculate-load-factors-with-amun-wind-atlas",level:3},{value:"Calculate Load Factors with Custom Wind Data",id:"calculate-load-factors-with-custom-wind-data",level:3},{value:"Calculate Load Factors with P50 scaling + Save to JSON",id:"calculate-load-factors-with-p50-scaling--save-to-json",level:3},{value:"Calculate Load Factors from Average Wind Speed",id:"calculate-load-factors-from-average-wind-speed",level:3},{value:"Calculate Load Factors from Collected Production Data",id:"calculate-load-factors-from-collected-production-data",level:3}];function c(e){const a={a:"a",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.p,{children:["Amun SDK provides an array of options on how to calculate load factors for a location. Examples below will be using ",(0,r.jsx)(a.a,{href:"/docs/Reference/session#run_load_factor_for_parameters",children:(0,r.jsx)(a.code,{children:"AmunSession.run_load_factor_for_parameters"})})," that expects two parts: ",(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#loadfactorbaseparameters-objects",children:"base parameters"})," and one of the flow parameters:"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#averagewindspeedparameters-objects",children:(0,r.jsx)(a.code,{children:"AverageWindSpeedParameters"})})}),"\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#builtinwindparameters-objects",children:(0,r.jsx)(a.code,{children:"BuiltInWindParameters"})})}),"\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#powerdensityparameters-objects",children:(0,r.jsx)(a.code,{children:"PowerDensityParameters"})})}),"\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#p50scalingparameters-objects",children:(0,r.jsx)(a.code,{children:"P50ScalingParameters"})})}),"\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#p50yieldscalingparameters-objects",children:(0,r.jsx)(a.code,{children:"P50YieldScalingParameters"})})}),"\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#uploadedwindparameters-objects",children:(0,r.jsx)(a.code,{children:"UploadedWindParameters"})})}),"\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#weibullparameters-objects",children:(0,r.jsx)(a.code,{children:"WeibullParameters"})})}),"\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#uploadedgeneration-objects",children:(0,r.jsx)(a.code,{children:"UploadedGeneration"})})}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:["And to read more information about each wind/power type, refer to the ",(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#windtype-objects",children:"WindType Objects"})," section of SDK Reference."]}),"\n",(0,r.jsxs)(a.p,{children:["You can find more examples with code in ",(0,r.jsx)(a.a,{href:"https://github.com/AuroraEnergyResearch/aurora-amun-python-sdk",children:"Amun Python SDK repository"})," inside the ",(0,r.jsx)(a.code,{children:"examples/"})," folder."]}),"\n",(0,r.jsx)(a.h4,{id:"time-consideration",children:"Time consideration"}),"\n",(0,r.jsxs)(a.p,{children:["It will take around 2-15 minutes to complete 1 load factors calculation. There may be times when you need to run 100+ calculations, so it might take a while for your requests to come back. For such cases, we have more advanced functions that allow you submit calculations in a batch which will speed up the total time of calculations. See ",(0,r.jsx)(a.a,{href:"/docs/Examples/Load%20Factors/advanced",children:"Advanced Examples"})," to see how it works"]}),"\n",(0,r.jsx)(a.h3,{id:"calculate-load-factors-with-amun-wind-atlas",children:"Calculate Load Factors with Amun Wind Atlas"}),"\n",(0,r.jsxs)(a.p,{children:["To use ",(0,r.jsx)(a.code,{children:"AmunSession.run_load_factor_for_parameters"}),", select an available turbine that is available in Amun and set base parameters. See ",(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#loadfactorbaseparameters-objects",children:"SDK Reference"})," for explanations on what each parameter means."]}),"\n",(0,r.jsxs)(a.p,{children:["Built-in dataset is a good choice of wind type to use if no site-specific data is available. To use a built-in datase, use ",(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#builtinwindparameters-objects",children:(0,r.jsx)(a.code,{children:"aurora.amun.client.parameters.BuiltInWindParameters(WindType)"})}),". You can pass types like ",(0,r.jsx)(a.code,{children:"AuroraWindAtlas"}),", ",(0,r.jsx)(a.code,{children:"Era5"}),", ",(0,r.jsx)(a.code,{children:"Merra2"}),", or ",(0,r.jsx)(a.code,{children:"NEWA"}),". But check whether the wind type is supported by the ",(0,r.jsx)(a.a,{href:"/docs/Examples/Regions/get-region-details",children:"region"}),"."]}),"\n",(0,r.jsx)(a.p,{children:"In our case, the region support Amun Wind Atlas, which is the most accurate version of built-in wind data available in Amun"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'from aurora.amun.client.session import AmunSession\nfrom aurora.amun.client.parameters import (\n    BuiltInWindParameters,\n    LoadFactorBaseParameters\n)\n\nsession = AmunSession()\nturbine = session.get_turbine_by_name("Siemens SWT-4.0-130")\n\nbase_parameters = LoadFactorBaseParameters(\n    turbineModelId=turbine["id"],\n    latitude=59.59,\n    longitude=0,\n    startTimeUTC="2018-01-01T00:00:00.000Z",\n    regionCode="GBR",\n    hubHeight=90,\n    obstacleHeight=0,\n    lossesAvailability=0.1,\n    lossesWake=0,\n    numberOfTurbines=12,\n    roughnessLength=0.02,\n    usePowerCurveSmoothing=False,\n    useReanalysisCorrection=True,\n)\n\nflow_parameters = BuiltInWindParameters("AuroraWindAtlas")\n\nprint("Running load factor calculation. This will take a few minutes...")\nload_factors = session.run_load_factor_for_parameters(\n    flow_parameters, base_parameters\n)\n\n# Print out the wind type and first 5 hourly load factors\nprint("Example load factors for wind type:", load_factors["parameters"]["windType"])\nprint(load_factors["weatherYearHourly"][:5])\n'})}),"\n",(0,r.jsx)(a.p,{children:"Expected output"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-powershell",children:"Example load factors for wind type: AuroraWindAtlas\n[{'dateTime': '2018-01-01T00:00Z', 'windSpeed': 8.330645528908647, 'loadFactor': 0.5154}, {'dateTime': '2018-01-01T01:00Z', 'windSpeed': 7.447324082608763, 'loadFactor': 0.3733}, {'dateTime': '2018-01-01T02:00Z', 'windSpeed': 7.131573353874345, 'loadFactor': 0.3252}, {'dateTime': '2018-01-01T03:00Z', 'windSpeed': 8.044216007075045, 'loadFactor': 0.4654}, {'dateTime': '2018-01-01T04:00Z', 'windSpeed': 8.72793935280024, 'loadFactor': 0.5847}]\n"})}),"\n",(0,r.jsx)(a.h3,{id:"calculate-load-factors-with-custom-wind-data",children:"Calculate Load Factors with Custom Wind Data"}),"\n",(0,r.jsxs)(a.p,{children:["The same code template can be used with other wind types. But for ",(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#uploadedwindparameters-objects",children:"Uploaded Wind"}),", for example, you might want to import a local JSON file with wind speeds. Use ",(0,r.jsx)(a.code,{children:"get_json"})," from Amun SDK utilities to load local file"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'from aurora.amun.client.session import AmunSession\nfrom aurora.amun.client.parameters import (\n    SpeedAtHeight,\n    UploadedWindParameters,\n    LoadFactorBaseParameters\n)\nfrom aurora.amun.client.utils import get_json\n\nsession = AmunSession()\nturbine = session.get_turbine_by_name("Siemens SWT-4.0-130")\n\nbase_parameters = LoadFactorBaseParameters(\n    turbineModelId=turbine["id"],\n    latitude=59.59,\n    longitude=0,\n    startTimeUTC="2017-01-01T00:00:00.000Z",\n    regionCode="GBR",\n    hubHeight=90,\n    obstacleHeight=0,\n    lossesAvailability=0.1,\n    lossesWake=0,\n    numberOfTurbines=12,\n    roughnessLength=0.02,\n    usePowerCurveSmoothing=False,\n    useReanalysisCorrection=False,\n)\n\n# Provide the path to your file\n# In our example, the file looks like {"speeds":[10.888, 11.59, ...]}\n# and contains 8760 values - for each hour in a year 2017\nspeeds = get_json("examples\\data\\example_windSpeed.json")["speeds"]\n\n# Insert the speeds as a SpeedAtHeight object for UploadedWindParameters\nflow_parameters = UploadedWindParameters(\n    uploadedWindStartTime="2017-01-01T00:00:00.000Z",\n    lowHeight=SpeedAtHeight(10, speeds=speeds),\n    granularityInMins=60,\n)\n\nprint("Running load factor calculation. This will take a few minutes...")\nload_factors = session.run_load_factor_for_parameters(\n    flow_parameters, base_parameters\n)\n\n# Print out the wind type and first 5 hourly load factors\nprint("Example load factors for wind type:", load_factors["parameters"]["windType"])\nprint(load_factors["weatherYearHourly"][:5])\n'})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-powershell",children:"Example load factors for wind type: UploadedWind\n[{'dateTime': '2017-01-01T00:00Z', 'windSpeed': 12.476777004018876, 'loadFactor': 0.8987}, {'dateTime': '2017-01-01T01:00Z', 'windSpeed': 13.354024977064322, 'loadFactor': 0.9}, {'dateTime': '2017-01-01T02:00Z', 'windSpeed': 12.738090910135982, 'loadFactor': 0.8994}, {'dateTime': '2017-01-01T03:00Z', 'windSpeed': 12.914630833546354, 'loadFactor': 0.8998}, {'dateTime': '2017-01-01T04:00Z', 'windSpeed': 12.017396341735259, 'loadFactor': 0.8976}]\n"})}),"\n",(0,r.jsx)(a.h3,{id:"calculate-load-factors-with-p50-scaling--save-to-json",children:"Calculate Load Factors with P50 scaling + Save to JSON"}),"\n",(0,r.jsxs)(a.p,{children:["You might want to save the load factors in a file. And for that you could either use Python's json API ",(0,r.jsx)(a.a,{href:"https://docs.python.org/3/library/json.html#json.dump",children:(0,r.jsx)(a.code,{children:"json.dump()"})})," or Amun SDK's ",(0,r.jsx)(a.code,{children:"save_to_json"})," function. For example, you can save a ",(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#p50scalingparameters-objects",children:"P50 scaling"})," calculation giving it a timestamp, wind type and unique id for reference."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'from aurora.amun.client.session import AmunSession\nfrom aurora.amun.client.parameters import (\n    P50ScalingParameters,\n    LoadFactorBaseParameters\n)\nfrom aurora.amun.client.utils import save_to_json\nfrom datetime import datetime\n\nsession = AmunSession()\nturbine = session.get_turbine_by_name("Siemens SWT-4.0-130")\n\nbase_parameters = LoadFactorBaseParameters(\n    turbineModelId=turbine["id"],\n    latitude=59.59,\n    longitude=0,\n    startTimeUTC="2018-01-01T00:00:00.000Z",\n    regionCode="GBR",\n    hubHeight=90,\n    obstacleHeight=0,\n    lossesAvailability=0.1,\n    lossesWake=0,\n    numberOfTurbines=12,\n    roughnessLength=0.02,\n    usePowerCurveSmoothing=False,\n    useReanalysisCorrection=False,\n)\n\nflow_parameters = P50ScalingParameters(p50GrossProduction=0.6)\n\nprint("Running load factor calculation. This will take a few minutes...")\nload_factors = session.run_load_factor_for_parameters(\n    flow_parameters, base_parameters\n)\n\ntimestamp = datetime.now().isoformat().replace(\':\',\'_\')\nsave_to_json(\n    f"load_factors_{timestamp}_{flow_parameters.windType}.json",\n    load_factors\n)\n'})}),"\n",(0,r.jsxs)(a.p,{children:["You will find the output in the new directoty called 'out' (will be created in the same folder where you run the script from). And the output file's name will look like this: ",(0,r.jsx)(a.code,{children:"load_factors_2023-10-06T10_01_09.965295_WindType.P50Scaling.json"}),"."]}),"\n",(0,r.jsx)(a.h3,{id:"calculate-load-factors-from-average-wind-speed",children:"Calculate Load Factors from Average Wind Speed"}),"\n",(0,r.jsxs)(a.p,{children:["Average Wind Speed is another type of calibration Amun SDK has available. See ",(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#averagewindspeed",children:"wind type overview"})," for context, and ",(0,r.jsx)(a.a,{href:"/docs/Reference/parameters#averagewindspeedparameters-objects",children:"parameters documentation"})," to see which values need to be provided"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'from aurora.amun.client.session import AmunSession\nfrom aurora.amun.client.parameters import (\n    AverageWindSpeedParameters,\n    LoadFactorBaseParameters\n)\nfrom aurora.amun.client.utils import save_to_json\n\nsession = AmunSession()\nturbine = session.get_turbine_by_name("Siemens SWT-4.0-130")\n\nbase_parameters = LoadFactorBaseParameters(\n    turbineModelId=turbine["id"],\n    latitude=59.59,\n    longitude=0,\n    startTimeUTC="2018-01-01T00:00:00.000Z",\n    regionCode="GBR",\n    hubHeight=90,\n    obstacleHeight=0,\n    lossesAvailability=0.1,\n    lossesWake=0,\n    numberOfTurbines=12,\n    roughnessLength=0.02,\n    usePowerCurveSmoothing=False,\n    useReanalysisCorrection=False,\n)\n\nflow_parameters = AverageWindSpeedParameters(averageWindSpeed=10, measurementHeight=40)\n\nload_factors = session.run_load_factor_for_parameters(\n    flow_parameters, base_parameters\n)\n\n# Print out the wind type and first 5 hourly load factors\nprint("Example load factors for wind type:", load_factors["parameters"]["windType"])\nprint(load_factors["weatherYearHourly"][:5])\n'})}),"\n",(0,r.jsx)(a.h3,{id:"calculate-load-factors-from-collected-production-data",children:"Calculate Load Factors from Collected Production Data"}),"\n",(0,r.jsxs)(a.p,{children:["Sometimes you will need to provide sizeable data to Amun SDK. In these cases, it is convenient to use one of the utils of Amun SDK: ",(0,r.jsx)(a.code,{children:"get_json"}),". Below is an example for Time Series Generation upload. The process includes an extra step of uploading the generation data to Amun before running valuation."]}),"\n",(0,r.jsx)(a.p,{children:"Make sure that the format of the data is correct and that the generation values have been produced in the location that you pass in valuation parameters. If there is a large discrepancy between the generation values and the long-term reanalysis data in that location Amun API will throw and error."}),"\n",(0,r.jsx)(a.p,{children:"Because the generation data has already been provided, it is not necessary to specify a turbine."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'\nfrom aurora.amun.client.parameters import LoadFactorBaseParameters, UploadedGenerationParameters\nfrom aurora.amun.client.session import AmunSession\nfrom aurora.amun.client.utils import get_json, save_to_json\n\nsession = AmunSession()\n\nregion = "gbr"\nlongitude = 7.774\nlatitude = 55.019\nhub_height = 120\nobstacle_height = 0\ngeneration_array = get_json("examples/example_loadfactor_generation_request/generation.json")["generation"]\ngeneration_start_time_utc = "2015-12-31T23:00:00.000Z"\nstart_time_utc = "2013-01-01T00:00:00.000Z"\ninstalled_capacity = 288\ngranularity_in_mins = 60\nuse_reanalysis_correction = False\nuse_power_curve_smoothing = False\n \nflow_parameters = UploadedGenerationParameters(\n    uploadedGeneration = generation_array,\n    uploadGenerationStartTime = generation_start_time_utc,\n    installedCapacity = installed_capacity,\n    granularityInMins = granularity_in_mins\n)\nbase_parameters = LoadFactorBaseParameters(\n    latitude = latitude,\n    longitude = longitude,\n    startTimeUTC = start_time_utc,\n    regionCode = region,\n    hubHeight = hub_height,\n    obstacleHeight = obstacle_height,\n    usePowerCurveSmoothing = use_power_curve_smoothing,\n    useReanalysisCorrection = use_reanalysis_correction,\n)\n\n## Ensure version is set to 2, as Version 1 of the API does not support UplodedGeneration for LoadFactor\nloadfactor = session.run_load_factor_for_parameters(flow_parameters, base_parameters, version=2)\nsave_to_json(f"loadfactor/loadfactor_{loadfactor[\'parameters\'][\'loadFactorRequestId\']}.json", loadfactor)\n\n\n'})}),"\n",(0,r.jsxs)(a.p,{children:["If you want to know how to run larger number of calculations more effectively, check the ",(0,r.jsx)(a.a,{href:"/docs/Examples/Load%20Factors/advanced",children:"Advanced Features"})," on the next page"]})]})}function u(e={}){const{wrapper:a}={...(0,t.a)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,a,n)=>{n.d(a,{Z:()=>i,a:()=>s});var r=n(7294);const t={},o=r.createContext(t);function s(e){const a=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(o.Provider,{value:a},e.children)}}}]);