"use strict";(self.webpackChunkamun_sdk=self.webpackChunkamun_sdk||[]).push([[852],{3905:(e,r,a)=>{a.d(r,{Zo:()=>u,kt:()=>f});var t=a(7294);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function i(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=t.createContext({}),c=function(e){var r=t.useContext(l),a=r;return e&&(a="function"==typeof e?e(r):s(s({},r),e)),a},u=function(e){var r=c(e.components);return t.createElement(l.Provider,{value:r},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(a),p=n,f=d["".concat(l,".").concat(p)]||d[p]||m[p]||o;return a?t.createElement(f,s(s({ref:r},u),{},{components:a})):t.createElement(f,s({ref:r},u))}));function f(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=p;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[d]="string"==typeof e?e:n,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},6553:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=a(7462),n=(a(7294),a(3905));const o={title:"Advanced Features"},s=void 0,i={unversionedId:"Examples/Load Factors/advanced",id:"Examples/Load Factors/advanced",title:"Advanced Features",description:"There are cases where you could benefit from running multiple load factor simulations in bulk using runloadfactorsforparametersbatch. In cases where you need to produce results for over 100 iterations, it will be faster than using common functions.",source:"@site/docs/Examples/01-Load Factors/02-advanced.md",sourceDirName:"Examples/01-Load Factors",slug:"/Examples/Load Factors/advanced",permalink:"/aurora-amun-python-sdk/docs/Examples/Load Factors/advanced",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Advanced Features"},sidebar:"docSidebar",previous:{title:"Common Examples",permalink:"/aurora-amun-python-sdk/docs/Examples/Load Factors/common"},next:{title:"Common Examples",permalink:"/aurora-amun-python-sdk/docs/Examples/Valuations/common"}},l={},c=[{value:"Calculate Load Factors in batch",id:"calculate-load-factors-in-batch",level:4}],u={toc:c},d="wrapper";function m(e){let{components:r,...a}=e;return(0,n.kt)(d,(0,t.Z)({},u,a,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"There are cases where you could benefit from running multiple load factor simulations in bulk using ",(0,n.kt)("a",{parentName:"p",href:"/docs/Reference/session#run_load_factors_for_parameters_batch"},(0,n.kt)("inlineCode",{parentName:"a"},"run_load_factors_for_parameters_batch")),". In cases where you need to produce results for over 100 iterations, it will be faster than using common functions."),(0,n.kt)("h4",{id:"calculate-load-factors-in-batch"},"Calculate Load Factors in batch"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from aurora.amun.client.parameters import (\n    AverageWindSpeedParameters,\n    BuiltInWindParameters,\n    FlowParameters,\n    LoadFactorBaseParameters,\n    P50ScalingParameters,\n    PowerDensityParameters,\n    SpeedAtHeight,\n    UploadedWindParameters,\n    WeibullParameters,\n    P50YieldScalingParameters,\n)\nfrom aurora.amun.client.session import AmunSession\n\nsession = AmunSession()\nturbine = session.get_turbine_by_name()\n\nbase_parameters = LoadFactorBaseParameters(\n    turbineModelId=turbine["id"],\n    latitude=59.59,\n    longitude=0,\n    startTimeUTC="2018-01-01T00:00:00.000Z",\n    regionCode="GBR",\n    hubHeight=90,\n    obstacleHeight=0,\n    lossesAvailability=0.1,\n    lossesWake=0,\n    numberOfTurbines=12,\n    roughnessLength=0.02,\n    usePowerCurveSmoothing=False,\n    useReanalysisCorrection=False,\n)\n\nlist_of_parameters = [\n    BuiltInWindParameters("era5"),\n    WeibullParameters(measurementHeight=90, weibullScale=12, weibullShape=6),\n    PowerDensityParameters(measurementHeight=90, averagePowerDensity=400.1),\n    AverageWindSpeedParameters(measurementHeight=90, averageWindSpeed=6.43),\n    P50ScalingParameters(p50GrossProduction=0.4),\n    P50YieldScalingParameters(annualProductionInGWHours=200),\n    UploadedWindParameters(\n        uploadedWindStartTime="2017-01-01T00:00:00.000Z",\n        lowHeight=SpeedAtHeight(10, speeds=speeds),\n        granularityInMins=60,\n    ),\n]\nresults = session.run_load_factors_for_parameters_batch(\n    list_of_parameters,\n    [base_parameters] * len(list_of_parameters) # This is needed to match every flow parameter with a base parameter\n)\n\nfor result, params in zip(results, list_of_parameters):\n    loadFactorRequestId = result["parameters"]["loadFactorRequestId"]\n    save_to_json(\n        f"load_factors/load_factors_{datetime.now().isoformat().replace(\':\',\'_\')}_{params.windType}_{loadFactorRequestId}.json",\n        result,\n    )\n')))}m.isMDXComponent=!0}}]);