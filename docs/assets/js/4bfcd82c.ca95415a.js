"use strict";(self.webpackChunkamun_sdk=self.webpackChunkamun_sdk||[]).push([[852],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(t),p=r,f=m["".concat(l,".").concat(p)]||m[p]||d[p]||o;return t?a.createElement(f,s(s({ref:n},c),{},{components:t})):a.createElement(f,s({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[m]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6553:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const o={title:"Advanced Features"},s=void 0,i={unversionedId:"Examples/Load Factors/advanced",id:"Examples/Load Factors/advanced",title:"Advanced Features",description:"There are cases where you could benefit from running multiple load factor simulations in bulk using runloadfactorsforparametersbatch. In cases where you need to produce results for over 100 iterations, it will be faster than using common functions.",source:"@site/docs/Examples/01-Load Factors/02-advanced.md",sourceDirName:"Examples/01-Load Factors",slug:"/Examples/Load Factors/advanced",permalink:"/aurora-amun-python-sdk/docs/Examples/Load Factors/advanced",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Advanced Features"},sidebar:"docSidebar",previous:{title:"Common Examples",permalink:"/aurora-amun-python-sdk/docs/Examples/Load Factors/common"},next:{title:"Common Examples",permalink:"/aurora-amun-python-sdk/docs/Examples/Valuations/common"}},l={},u=[{value:"Calculating load factors for all wind types",id:"calculating-load-factors-for-all-wind-types",level:3},{value:"Iterating though parameter values",id:"iterating-though-parameter-values",level:3},{value:"Submit calculations and collect results later",id:"submit-calculations-and-collect-results-later",level:3}],c={toc:u},m="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"There are cases where you could benefit from running multiple load factor simulations in bulk using ",(0,r.kt)("a",{parentName:"p",href:"/docs/Reference/session#run_load_factors_for_parameters_batch"},(0,r.kt)("inlineCode",{parentName:"a"},"run_load_factors_for_parameters_batch")),". In cases where you need to produce results for over 100 iterations, it will be faster than using common functions."),(0,r.kt)("h3",{id:"calculating-load-factors-for-all-wind-types"},"Calculating load factors for all wind types"),(0,r.kt)("p",null,"In this example, you can see how you can run load factor calculation iterating through different wind types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from aurora.amun.client.parameters import (\n    AverageWindSpeedParameters,\n    BuiltInWindParameters,\n    FlowParameters,\n    LoadFactorBaseParameters,\n    P50ScalingParameters,\n    PowerDensityParameters,\n    SpeedAtHeight,\n    UploadedWindParameters,\n    WeibullParameters,\n    P50YieldScalingParameters,\n)\nfrom aurora.amun.client.session import AmunSession\n\nsession = AmunSession()\nturbine = session.get_turbine_by_name()\n\nbase_parameters = LoadFactorBaseParameters(\n    turbineModelId=turbine["id"],\n    latitude=59.59,\n    longitude=0,\n    startTimeUTC="2018-01-01T00:00:00.000Z",\n    regionCode="GBR",\n    hubHeight=90,\n    obstacleHeight=0,\n    lossesAvailability=0.1,\n    lossesWake=0,\n    numberOfTurbines=12,\n    roughnessLength=0.02,\n    usePowerCurveSmoothing=False,\n    useReanalysisCorrection=False,\n)\n\nlist_of_parameters = [\n    BuiltInWindParameters("era5"),\n    WeibullParameters(measurementHeight=90, weibullScale=12, weibullShape=6),\n    PowerDensityParameters(measurementHeight=90, averagePowerDensity=400.1),\n    AverageWindSpeedParameters(measurementHeight=90, averageWindSpeed=6.43),\n    P50ScalingParameters(p50GrossProduction=0.4),\n    P50YieldScalingParameters(annualProductionInGWHours=200),\n    UploadedWindParameters(\n        uploadedWindStartTime="2017-01-01T00:00:00.000Z",\n        lowHeight=SpeedAtHeight(10, speeds=speeds),\n        granularityInMins=60,\n    ),\n]\nresults = session.run_load_factors_for_parameters_batch(\n    list_of_parameters,\n    [base_parameters] * len(list_of_parameters) # This is needed to match every flow parameter with a base parameter\n)\n\nfor result, params in zip(results, list_of_parameters):\n    loadFactorRequestId = result["parameters"]["loadFactorRequestId"]\n    save_to_json(\n        f"load_factors/load_factors_{datetime.now().isoformat().replace(\':\',\'_\')}_{params.windType}_{loadFactorRequestId}.json",\n        result,\n    )\n')),(0,r.kt)("h3",{id:"iterating-though-parameter-values"},"Iterating though parameter values"),(0,r.kt)("p",null,"You can iterate though values to conduct studies. For example, you can submit a large number of requests to see what results different average wind speed values produce"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from aurora.amun.client.parameters import AverageWindSpeedParameters\nfrom aurora.amun.client.session import AmunSession\n\nsession = AmunSession()\nturbine = session.get_turbine_by_name()\n\nbase_parameters = LoadFactorBaseParameters(\n    turbineModelId=turbine["id"],\n    latitude=59.59,\n    longitude=0,\n    startTimeUTC="2018-01-01T00:00:00.000Z",\n    regionCode="GBR",\n    hubHeight=90,\n    obstacleHeight=0,\n    lossesAvailability=0.1,\n    lossesWake=0,\n    numberOfTurbines=12,\n    roughnessLength=0.02,\n    usePowerCurveSmoothing=False,\n    useReanalysisCorrection=False,\n)\n\nlist_of_parameters = []\nfor speedTimes10 in np.arange(10, 150, 1):\n    speed = speedTimes10 / 10   # So that we could interate more granularly\n    list_of_parameter.append(AverageWindSpeedParameters(measurementHeight=90, averageWindSpeed=speed))\n\nresults = session.run_load_factors_for_parameters_batch(\n    list_of_parameters,\n    [base_parameters] * len(list_of_parameters) # This is needed to match every variant of wind speed with a base parameter\n)\n\nfor result, params in zip(results, list_of_parameters):\n    loadFactorRequestId = result["parameters"]["loadFactorRequestId"]\n    save_to_json(\n        f"load_factors/load_factors_{datetime.now().isoformat().replace(\':\',\'_\')}_{params.windType}_{loadFactorRequestId}.json",\n        result,\n    )\n')),(0,r.kt)("h3",{id:"submit-calculations-and-collect-results-later"},"Submit calculations and collect results later"),(0,r.kt)("p",null,"For this example, imagine that we want to evaluate load factors in 100 locations within the GBR region. It might take a while to calculate all of them, so we will first submit them at once."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from aurora.amun.client.session import AmunSession\nfrom aurora.amun.client.utils import save_to_json, get_json\nsession = AmunSession()\nturbine = session.get_turbine_by_name("Siemens SWT-4.0-130")\n\n# I want to run load factor calculation with the same parameters\n# in 100 different locations\ndef get_configuration(lat: float, lon: float):\n    return {\n    "windType": "AuroraWindAtlas",\n    "turbineModelId": turbine["id"],\n    "latitude": lat,\n    "longitude": lon,\n    "startTimeUTC": "2018-01-01T00:00:00.000Z",\n    "regionCode": "GBR",\n    "hubHeight": 90,\n    "obstacleHeight": 0,\n    "numberOfTurbines": 12,\n    "roughnessLength": 0.02,\n    "usePowerCurveSmoothing": False,\n}\n\n# Make a list of coordinates within rectabgular area (50,55) -> (-5,0)\n# 0.5 degrees apart\ncoordinates = []\nfor lat in range(500, 550, 5):\n    for lon in range(-50, 0, 5):\n        coordinates.append((lat/10, lon/10))\n\n# Construct configurations\nconfigs = []\nfor (lat, lon) in coordinates:\n    configs.append(get_configuration(lat, lon))\n\n# Submit the calculation requests and save tokens in a separate file to get the results later\ntokens = session.submit_load_factor_calculations(configs)\nsave_to_json("tokens.json", tokens)\n')),(0,r.kt)("p",null,"In some time, you can extract the results using those tokens. The results will be available for 30 days"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from aurora.amun.client.session import AmunSession\nfrom aurora.amun.client.utils import save_to_json, get_json\nsession = AmunSession()\ntokens = get_json("out/tokens.json")\n\nfor token in tokens:\n    result = session.get_load_factor_calculation(token)\n    lat = result["parameters"]["latitude"]\n    lon = result["parameters"]["longitude"]\n    save_to_json("load_factor_at({lat},{lon})", result)\n')))}d.isMDXComponent=!0}}]);