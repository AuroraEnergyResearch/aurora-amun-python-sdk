"use strict";(self.webpackChunkamun_sdk=self.webpackChunkamun_sdk||[]).push([[717],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>f});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),d=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},p=function(e){var a=d(e.components);return n.createElement(l.Provider,{value:a},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=d(t),u=r,f=m["".concat(l,".").concat(u)]||m[u]||c[u]||o;return t?n.createElement(f,s(s({ref:a},p),{},{components:t})):n.createElement(f,s({ref:a},p))}));function f(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[m]="string"==typeof e?e:r,s[1]=i;for(var d=2;d<o;d++)s[d]=t[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},168:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=t(7462),r=(t(7294),t(3905));const o={title:"Common Examples"},s=void 0,i={unversionedId:"Examples/Load Factors/common",id:"Examples/Load Factors/common",title:"Common Examples",description:"Amun SDK provides an array of options on how to calculate load factors for a location. Examples below will be using AmunSession.runloadfactorforparameters that expects two parts",source:"@site/docs/Examples/01-Load Factors/01-common.md",sourceDirName:"Examples/01-Load Factors",slug:"/Examples/Load Factors/common",permalink:"/aurora-amun-python-sdk/docs/Examples/Load Factors/common",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Common Examples"},sidebar:"docSidebar",previous:{title:"Installation",permalink:"/aurora-amun-python-sdk/docs/intro"},next:{title:"Advanced Features",permalink:"/aurora-amun-python-sdk/docs/Examples/Load Factors/advanced"}},l={},d=[{value:"Calculate Load Factors with Amun Wind Atlas",id:"calculate-load-factors-with-amun-wind-atlas",level:3},{value:"Calculate Load Factors with Custom Wind Data",id:"calculate-load-factors-with-custom-wind-data",level:3},{value:"Calculate Load Factors with P50 scaling + Save to JSON",id:"calculate-load-factors-with-p50-scaling--save-to-json",level:3},{value:"Calculate Load Factors from Average Wind Speed",id:"calculate-load-factors-from-average-wind-speed",level:3}],p={toc:d},m="wrapper";function c(e){let{components:a,...t}=e;return(0,r.kt)(m,(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Amun SDK provides an array of options on how to calculate load factors for a location. Examples below will be using ",(0,r.kt)("a",{parentName:"p",href:"/docs/Reference/session#run_load_factor_for_parameters"},(0,r.kt)("inlineCode",{parentName:"a"},"AmunSession.run_load_factor_for_parameters"))," that expects two parts: ",(0,r.kt)("a",{parentName:"p",href:"/docs/Reference/parameters#loadfactorbaseparameters-objects"},"base parameters")," and one of the flow parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Reference/parameters#averagewindspeedparameters-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"AverageWindSpeedParameters"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Reference/parameters#builtinwindparameters-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"BuiltInWindParameters"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Reference/parameters#powerdensityparameters-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"PowerDensityParameters"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Reference/parameters#p50scalingparameters-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"P50ScalingParameters"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Reference/parameters#p50yieldscalingparameters-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"P50YieldScalingParameters"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Reference/parameters#uploadedwindparameters-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"UploadedWindParameters"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Reference/parameters#weibullparameters-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"WeibullParameters")))),(0,r.kt)("p",null,"And to read more information about each wind/power type, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Reference/parameters#windtype-objects"},"WindType Objects")," section of SDK Reference."),(0,r.kt)("p",null,"You can find more examples with code in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AuroraEnergyResearch/aurora-amun-python-sdk"},"Amun Python SDK repository")," inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"examples/")," folder."),(0,r.kt)("h3",{id:"calculate-load-factors-with-amun-wind-atlas"},"Calculate Load Factors with Amun Wind Atlas"),(0,r.kt)("p",null,"To use ",(0,r.kt)("inlineCode",{parentName:"p"},"AmunSession.run_load_factor_for_parameters"),", select an available turbine that is available in Amun and set base parameters. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/Reference/parameters#loadfactorbaseparameters-objects"},"SDK Reference")," for explanations on what each parameter means.  "),(0,r.kt)("p",null,"Built-in dataset is a good choice of wind type to use if no site-specific data is available. To use a built-in datase, use ",(0,r.kt)("a",{parentName:"p",href:"/docs/Reference/parameters#builtinwindparameters-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"aurora.amun.client.parameters.BuiltInWindParameters(WindType)")),". You can pass types like ",(0,r.kt)("inlineCode",{parentName:"p"},"AuroraWindAtlas"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Era5"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Merra2"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"NEWA"),". But check whether the wind type is supported by the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Examples/Regions/get-region-details"},"region"),".  "),(0,r.kt)("p",null,"In our case, the region support Amun Wind Atlas, which is the most accurate version of built-in wind data available in Amun"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from aurora.amun.client.session import AmunSession\nfrom aurora.amun.client.parameters import (\n    BuiltInWindParameters,\n    LoadFactorBaseParameters\n)\n\nsession = AmunSession()\nturbine = session.get_turbine_by_name("Siemens SWT-4.0-130")\n\nbase_parameters = LoadFactorBaseParameters(\n    turbineModelId=turbine["id"],\n    latitude=59.59,\n    longitude=0,\n    startTimeUTC="2018-01-01T00:00:00.000Z",\n    regionCode="GBR",\n    hubHeight=90,\n    obstacleHeight=0,\n    lossesAvailability=0.1,\n    lossesWake=0,\n    numberOfTurbines=12,\n    roughnessLength=0.02,\n    usePowerCurveSmoothing=False,\n    useReanalysisCorrection=True,\n)\n\nflow_parameters = BuiltInWindParameters("AuroraWindAtlas")\n\nload_factors = session.run_load_factor_for_parameters(\n    flow_parameters, base_parameters\n)\n\n# Print out the wind type and first 5 hourly load factors\nprint("Example load factors for wind type:", load_factors["parameters"]["windType"])\nprint(load_factors["weatherYearHourly"][:5])\n')),(0,r.kt)("p",null,"Expected output (truncated)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"Example load factors for wind type: era5\n[{'dateTime': '2018-01-01T00:00Z', 'windSpeed': 8.344985289917028, 'loadFactor': 0.5179}, {'dateTime': '2018-01-01T01:00Z', 'windSpeed': 7.460143358993289, 'loadFactor': 0.3753}, {'dateTime': '2018-01-01T02:00Z', 'windSpeed': 7.143849120158415, 'loadFactor': 0.327}, {'dateTime': '2018-01-01T03:00Z', 'windSpeed': 8.058062729353766, 'loadFactor': 0.4678}, {'dateTime': '2018-01-01T04:00Z', 'windSpeed': 8.742962986200617, 'loadFactor': 0.5874}]\n")),(0,r.kt)("h3",{id:"calculate-load-factors-with-custom-wind-data"},"Calculate Load Factors with Custom Wind Data"),(0,r.kt)("p",null,"The same code template can be used with other wind types. But for ",(0,r.kt)("a",{parentName:"p",href:"/docs/Reference/parameters#uploadedwindparameters-objects"},"Uploaded Wind"),", for example, you might want to import a local JSON file with wind speeds. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"get_json")," from Amun SDK utilities to load local file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from aurora.amun.client.session import AmunSession\nfrom aurora.amun.client.parameters import (\n    UploadedWindParameters,\n    LoadFactorBaseParameters\n)\nfrom aurora.amun.client.utils import get_json\n\nsession = AmunSession()\nturbine = session.get_turbine_by_name("Siemens SWT-4.0-130")\n\nbase_parameters = LoadFactorBaseParameters(\n    turbineModelId=turbine["id"],\n    latitude=59.59,\n    longitude=0,\n    startTimeUTC="2018-01-01T00:00:00.000Z",\n    regionCode="GBR",\n    hubHeight=90,\n    obstacleHeight=0,\n    lossesAvailability=0.1,\n    lossesWake=0,\n    numberOfTurbines=12,\n    roughnessLength=0.02,\n    usePowerCurveSmoothing=False,\n    useReanalysisCorrection=False,\n)\n\n# Provide the path to your file\n# In our example, the file looks like {"speeds":[10.888, 11.59, ...]}\n# and contains 8760 values - for each hour in a year 2017\nspeeds = get_json("examples\\data\\example_windSpeed.json")["speeds"]\n\nflow_parameters = UploadedWindParameters(\n    uploadedWindStartTime="2017-01-01T00:00:00.000Z",\n    lowHeight=SpeedAtHeight(10, speeds=speeds),\n    granularityInMins=60,\n)\n\nload_factors = session.run_load_factor_for_parameters(\n    flow_parameters, base_parameters\n)\n\n# Print out the wind type and first 5 hourly load factors\nprint("Example load factors for wind type:", load_factors["parameters"]["windType"])\nprint(load_factors["weatherYearHourly"][:5])\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"Example load factors for wind type: UploadedWind\n[{'dateTime': '2017-01-01T00:00Z', 'windSpeed': 12.476777004018876, 'loadFactor': 0.8987}, {'dateTime': '2017-01-01T01:00Z', 'windSpeed': 13.354024977064322, 'loadFactor': 0.9}, {'dateTime': '2017-01-01T02:00Z', 'windSpeed': 12.738090910135982, 'loadFactor': 0.8994}, {'dateTime': '2017-01-01T03:00Z', 'windSpeed': 12.914630833546354, 'loadFactor': 0.8998}, {'dateTime': '2017-01-01T04:00Z', 'windSpeed': 12.017396341735259, 'loadFactor': 0.8976}]\n")),(0,r.kt)("h3",{id:"calculate-load-factors-with-p50-scaling--save-to-json"},"Calculate Load Factors with P50 scaling + Save to JSON"),(0,r.kt)("p",null,"You might want to save the load factors in a file. And for that you could use one of the Amun SDK utils. For example, you can save a ",(0,r.kt)("a",{parentName:"p",href:"/docs/Reference/parameters#p50scalingparameters-objects"},"P50 scaling")," calculation giving it a timestamp, wind type and unique id for reference."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from aurora.amun.client.session import AmunSession\nfrom aurora.amun.client.parameters import (\n    WeibullParameters,\n    LoadFactorBaseParameters\n)\nfrom aurora.amun.client.utils import save_to_json\n\nsession = AmunSession()\nturbine = session.get_turbine_by_name("Siemens SWT-4.0-130")\n\nbase_parameters = LoadFactorBaseParameters(\n    turbineModelId=turbine["id"],\n    latitude=59.59,\n    longitude=0,\n    startTimeUTC="2018-01-01T00:00:00.000Z",\n    regionCode="GBR",\n    hubHeight=90,\n    obstacleHeight=0,\n    lossesAvailability=0.1,\n    lossesWake=0,\n    numberOfTurbines=12,\n    roughnessLength=0.02,\n    usePowerCurveSmoothing=False,\n    useReanalysisCorrection=False,\n)\n\nflow_parameters = P50ScalingParameters(p50GrossProduction=0.6)\n\nload_factors = session.run_load_factor_for_parameters(\n    flow_parameters, base_parameters\n)\n\nloadFactorRequestId = load_factors["parameters"]["loadFactorRequestId"]\nsave_to_json(\n    f"load_factors_{datetime.now().isoformat().replace(\':\',\'_\')}_{flow_parameters.windType}_{loadFactorRequestId}.json",\n    load_factors\n)\n')),(0,r.kt)("p",null,"You will find the output in the new directoty called 'out' (will be created in the same folder where you run the script from). And the output file's name will look like this: ",(0,r.kt)("inlineCode",{parentName:"p"},"load_factors_2023-10-03T10_43_21.083658_WindType.P50Scaling_e33fcdf0-5e98-47ee-b7df-424d75809e66.json"),"."),(0,r.kt)("h3",{id:"calculate-load-factors-from-average-wind-speed"},"Calculate Load Factors from Average Wind Speed"),(0,r.kt)("p",null,"Average Wind Speed is another type of calibration Amun SDK has available. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/Reference/parameters#averagewindspeed"},"wind type overview")," for context, and ",(0,r.kt)("a",{parentName:"p",href:"/docs/Reference/parameters#averagewindspeedparameters-objects"},"parameters documentation")," to see which values need to be provided"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from aurora.amun.client.session import AmunSession\nfrom aurora.amun.client.parameters import (\n    WeibullParameters,\n    LoadFactorBaseParameters\n)\nfrom aurora.amun.client.utils import save_to_json\n\nsession = AmunSession()\nturbine = session.get_turbine_by_name("Siemens SWT-4.0-130")\n\nbase_parameters = LoadFactorBaseParameters(\n    turbineModelId=turbine["id"],\n    latitude=59.59,\n    longitude=0,\n    startTimeUTC="2018-01-01T00:00:00.000Z",\n    regionCode="GBR",\n    hubHeight=90,\n    obstacleHeight=0,\n    lossesAvailability=0.1,\n    lossesWake=0,\n    numberOfTurbines=12,\n    roughnessLength=0.02,\n    usePowerCurveSmoothing=False,\n    useReanalysisCorrection=False,\n)\n\nflow_parameters = AverageWindSpeedParameters(averageWindSpeed=10, measurementHeight=40)\n\nload_factors = session.run_load_factor_for_parameters(\n    flow_parameters, base_parameters\n)\n\nloadFactorRequestId = load_factors["parameters"]["loadFactorRequestId"]\n')))}c.isMDXComponent=!0}}]);